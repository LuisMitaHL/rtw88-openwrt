diff --git a/bf.c b/bf.c
index 95de3d3..838c627 100644
--- a/bf.c
+++ b/bf.c
@@ -57,7 +57,7 @@ void rtw_bf_assoc(struct rtw_dev *rtwdev, struct ieee80211_vif *vif,
 	}
 
 	ic_vht_cap = &hw->wiphy->bands[NL80211_BAND_5GHZ]->vht_cap;
-#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 19, 0)
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 19, 0) && !defined(OPENWRT)
 	vht_cap = &sta->vht_cap;
 #else
 	vht_cap = &sta->deflink.vht_cap;
@@ -75,7 +75,7 @@ void rtw_bf_assoc(struct rtw_dev *rtwdev, struct ieee80211_vif *vif,
 		ether_addr_copy(bfee->mac_addr, bssid);
 		bfee->role = RTW_BFEE_MU;
 		bfee->p_aid = (bssid[5] << 1) | (bssid[4] >> 7);
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 0, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 0, 0) || defined(OPENWRT)
 		bfee->aid = vif->cfg.aid;
 #else
 		bfee->aid = bss_conf->aid;
diff --git a/fw.c b/fw.c
index c3d021b..ec4e214 100644
--- a/fw.c
+++ b/fw.c
@@ -196,7 +196,7 @@ legacy:
 	si->ra_report.desc_rate = rate;
 	si->ra_report.bit_rate = bit_rate;
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 1, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 1, 0) || defined(OPENWRT)
 	sta->deflink.agg.max_rc_amsdu_len = get_max_amsdu_len(bit_rate);
 #else
 	sta->max_rc_amsdu_len = get_max_amsdu_len(bit_rate);
@@ -734,7 +734,7 @@ void rtw_fw_send_rssi_info(struct rtw_dev *rtwdev, struct rtw_sta_info *si)
 	rtw_fw_send_h2c_command(rtwdev, h2c_pkt);
 }
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 18, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 18, 0) || defined(OPENWRT)
 void rtw_fw_send_ra_info(struct rtw_dev *rtwdev, struct rtw_sta_info *si,
 			 bool reset_ra_mask)
 #else
@@ -744,7 +744,7 @@ void rtw_fw_send_ra_info(struct rtw_dev *rtwdev, struct rtw_sta_info *si)
 	u8 h2c_pkt[H2C_PKT_SIZE] = {0};
 	bool disable_pt = true;
 	u32 mask_hi;
-#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 18, 0)
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 18, 0) && !defined(OPENWRT)
 	bool reset_ra_mask = true;
 #endif
 
@@ -1257,7 +1257,7 @@ static struct sk_buff *rtw_get_rsvd_page_skb(struct ieee80211_hw *hw,
 
 	switch (rsvd_pkt->type) {
 	case RSVD_BEACON:
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(6, 0, 0))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(6, 0, 0)) || defined(OPENWRT)
 		skb_new = ieee80211_beacon_get_tim(hw, vif, &tim_offset, NULL, 0);
 #else
 		skb_new = ieee80211_beacon_get_tim(hw, vif, &tim_offset, NULL);
@@ -1272,7 +1272,7 @@ static struct sk_buff *rtw_get_rsvd_page_skb(struct ieee80211_hw *hw,
 		break;
 	case RSVD_NULL:
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 14, 17)
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 1, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 1, 0) || defined(OPENWRT)
 		skb_new = ieee80211_nullfunc_get(hw, vif, -1, false);
 #else
 		skb_new = ieee80211_nullfunc_get(hw, vif, false);
@@ -1283,7 +1283,7 @@ static struct sk_buff *rtw_get_rsvd_page_skb(struct ieee80211_hw *hw,
 		break;
 	case RSVD_QOS_NULL:
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 14, 17)
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 1, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 1, 0) || defined(OPENWRT)
 		skb_new = ieee80211_nullfunc_get(hw, vif, -1, true);
 #else
 		skb_new = ieee80211_nullfunc_get(hw, vif, true);
diff --git a/fw.h b/fw.h
index 54035ed..94440bb 100644
--- a/fw.h
+++ b/fw.h
@@ -846,7 +846,7 @@ void rtw_fw_coex_query_hid_info(struct rtw_dev *rtwdev, u8 sub_id, u8 data);
 
 void rtw_fw_bt_wifi_control(struct rtw_dev *rtwdev, u8 op_code, u8 *data);
 void rtw_fw_send_rssi_info(struct rtw_dev *rtwdev, struct rtw_sta_info *si);
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 18, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 18, 0) || defined(OPENWRT)
 void rtw_fw_send_ra_info(struct rtw_dev *rtwdev, struct rtw_sta_info *si,
 			 bool reset_ra_mask);
 #else
diff --git a/mac80211.c b/mac80211.c
index f7c6e0a..dd29a1a 100644
--- a/mac80211.c
+++ b/mac80211.c
@@ -378,7 +378,7 @@ static void rtw_conf_tx(struct rtw_dev *rtwdev,
 static void rtw_ops_bss_info_changed(struct ieee80211_hw *hw,
 				     struct ieee80211_vif *vif,
 				     struct ieee80211_bss_conf *conf,
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(6, 0, 0))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(6, 0, 0)) || defined(OPENWRT)
 				     u64 changed)
 #else
 				     u32 changed)
@@ -396,7 +396,7 @@ static void rtw_ops_bss_info_changed(struct ieee80211_hw *hw,
 
 	if (changed & BSS_CHANGED_ASSOC) {
 		rtw_vif_assoc_changed(rtwvif, conf);
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(6, 0, 0))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(6, 0, 0)) || defined(OPENWRT)
 		if (vif->cfg.assoc) {
 #else
 		if (conf->assoc) {
@@ -405,7 +405,7 @@ static void rtw_ops_bss_info_changed(struct ieee80211_hw *hw,
 			rtw_fw_download_rsvd_page(rtwdev);
 			rtw_send_rsvd_page_h2c(rtwdev);
 			rtw_fw_default_port(rtwdev, rtwvif);
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(6, 0, 0))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(6, 0, 0)) || defined(OPENWRT)
 			rtw_coex_media_status_notify(rtwdev, vif->cfg.assoc);
 #else
 			rtw_coex_media_status_notify(rtwdev, conf->assoc);
@@ -476,7 +476,7 @@ static void rtw_ops_bss_info_changed(struct ieee80211_hw *hw,
 	mutex_unlock(&rtwdev->mutex);
 }
 
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(6, 0, 0))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(6, 0, 0)) || defined(OPENWRT)
 static int rtw_ops_start_ap(struct ieee80211_hw *hw,
 			    struct ieee80211_vif *vif,
 			    struct ieee80211_bss_conf *link_conf)
@@ -497,7 +497,7 @@ static int rtw_ops_start_ap(struct ieee80211_hw *hw, struct ieee80211_vif *vif)
 	return 0;
 }
 
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(6, 0, 0))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(6, 0, 0)) || defined(OPENWRT)
 static void rtw_ops_stop_ap(struct ieee80211_hw *hw,
 			    struct ieee80211_vif *vif,
 			    struct ieee80211_bss_conf *link_conf)
@@ -518,7 +518,7 @@ static void rtw_ops_stop_ap(struct ieee80211_hw *hw,
 
 static int rtw_ops_conf_tx(struct ieee80211_hw *hw,
 			   struct ieee80211_vif *vif,
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(6, 0, 0))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(6, 0, 0)) || defined(OPENWRT)
 			   unsigned int link_id, u16 ac,
 #else
 			   u16 ac,
diff --git a/main.c b/main.c
index 94c304c..0520e6b 100644
--- a/main.c
+++ b/main.c
@@ -194,7 +194,7 @@ static void rtw_vif_watch_dog_iter(void *data, struct ieee80211_vif *vif)
 	struct rtw_vif *rtwvif = (struct rtw_vif *)vif->drv_priv;
 
 	if (vif->type == NL80211_IFTYPE_STATION)
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 0, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 0, 0) || defined(OPENWRT)
 		if (vif->cfg.assoc)
 #else
 		if (vif->bss_conf.assoc)
@@ -588,7 +588,7 @@ EXPORT_SYMBOL(rtw_dump_reg);
 void rtw_vif_assoc_changed(struct rtw_vif *rtwvif,
 			   struct ieee80211_bss_conf *conf)
 {
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 0, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 0, 0) || defined(OPENWRT)
 	struct ieee80211_vif *vif = NULL;
 
 	if (conf)
@@ -1018,7 +1018,7 @@ static void rtw_hw_config_rf_ant_num(struct rtw_dev *rtwdev, u8 hw_ant_num)
 static u64 get_vht_ra_mask(struct ieee80211_sta *sta)
 {
 	u64 ra_mask = 0;
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0) || defined(OPENWRT)
 	u16 mcs_map = le16_to_cpu(sta->deflink.vht_cap.vht_mcs.rx_mcs_map);
 #else
 	u16 mcs_map = le16_to_cpu(sta->vht_cap.vht_mcs.rx_mcs_map);
@@ -1241,26 +1241,26 @@ void rtw_update_sta_info(struct rtw_dev *rtwdev, struct rtw_sta_info *si,
 	bool is_vht_enable = false;
 	bool is_support_sgi = false;
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0) || defined(OPENWRT)
 	if (sta->deflink.vht_cap.vht_supported) {
 #else
 	if (sta->vht_cap.vht_supported) {
 #endif
 		is_vht_enable = true;
 		ra_mask |= get_vht_ra_mask(sta);
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0) || defined(OPENWRT)
 		if (sta->deflink.vht_cap.cap & IEEE80211_VHT_CAP_RXSTBC_MASK)
 #else
 		if (sta->vht_cap.cap & IEEE80211_VHT_CAP_RXSTBC_MASK)
 #endif
 			stbc_en = VHT_STBC_EN;
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0) || defined(OPENWRT)
 		if (sta->deflink.vht_cap.cap & IEEE80211_VHT_CAP_RXLDPC)
 #else
 		if (sta->vht_cap.cap & IEEE80211_VHT_CAP_RXLDPC)
 #endif
 			ldpc_en = VHT_LDPC_EN;
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0) || defined(OPENWRT)
 	} else if (sta->deflink.ht_cap.ht_supported) {
 		ra_mask |= ((u64)sta->deflink.ht_cap.mcs.rx_mask[3] << 36) |
 			   ((u64)sta->deflink.ht_cap.mcs.rx_mask[2] << 28) |
@@ -1290,20 +1290,20 @@ void rtw_update_sta_info(struct rtw_dev *rtwdev, struct rtw_sta_info *si,
 			   RA_MASK_VHT_RATES_1SS | RA_MASK_HT_RATES_1SS;
 
 	if (hal->current_band_type == RTW_BAND_5G) {
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0) || defined(OPENWRT)
 		ra_mask |= (u64)sta->deflink.supp_rates[NL80211_BAND_5GHZ] << 4;
 #else
 		ra_mask |= (u64)sta->supp_rates[NL80211_BAND_5GHZ] << 4;
 #endif
 		ra_mask_bak = ra_mask;
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0) || defined(OPENWRT)
 		if (sta->deflink.vht_cap.vht_supported) {
 #else
 		if (sta->vht_cap.vht_supported) {
 #endif
 			ra_mask &= RA_MASK_VHT_RATES | RA_MASK_OFDM_IN_VHT;
 			wireless_set = WIRELESS_OFDM | WIRELESS_VHT;
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0) || defined(OPENWRT)
 		} else if (sta->deflink.ht_cap.ht_supported) {
 #else
 		} else if (sta->ht_cap.ht_supported) {
@@ -1315,13 +1315,13 @@ void rtw_update_sta_info(struct rtw_dev *rtwdev, struct rtw_sta_info *si,
 		}
 		dm_info->rrsr_val_init = RRSR_INIT_5G;
 	} else if (hal->current_band_type == RTW_BAND_2G) {
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0) || defined(OPENWRT)
 		ra_mask |= sta->deflink.supp_rates[NL80211_BAND_2GHZ];
 #else
 		ra_mask |= sta->supp_rates[NL80211_BAND_2GHZ];
 #endif
 		ra_mask_bak = ra_mask;
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0) || defined(OPENWRT)
 		if (sta->deflink.vht_cap.vht_supported) {
 #else
 		if (sta->vht_cap.vht_supported) {
@@ -1330,7 +1330,7 @@ void rtw_update_sta_info(struct rtw_dev *rtwdev, struct rtw_sta_info *si,
 				   RA_MASK_OFDM_IN_VHT;
 			wireless_set = WIRELESS_CCK | WIRELESS_OFDM |
 				       WIRELESS_HT | WIRELESS_VHT;
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0) || defined(OPENWRT)
 		} else if (sta->deflink.ht_cap.ht_supported) {
 #else
 		} else if (sta->ht_cap.ht_supported) {
@@ -1339,7 +1339,7 @@ void rtw_update_sta_info(struct rtw_dev *rtwdev, struct rtw_sta_info *si,
 				   RA_MASK_OFDM_IN_HT_2G;
 			wireless_set = WIRELESS_CCK | WIRELESS_OFDM |
 				       WIRELESS_HT;
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0) || defined(OPENWRT)
 		} else if (sta->deflink.supp_rates[0] <= 0xf) {
 #else
 		} else if (sta->supp_rates[0] <= 0xf) {
@@ -1356,14 +1356,14 @@ void rtw_update_sta_info(struct rtw_dev *rtwdev, struct rtw_sta_info *si,
 		wireless_set = 0;
 	}
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0) || defined(OPENWRT)
 	switch (sta->deflink.bandwidth) {
 #else
 	switch (sta->bandwidth) {
 #endif
 	case IEEE80211_STA_RX_BW_80:
 		bw_mode = RTW_CHANNEL_WIDTH_80;
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0) || defined(OPENWRT)
 		is_support_sgi = sta->deflink.vht_cap.vht_supported &&
 				 (sta->deflink.vht_cap.cap & IEEE80211_VHT_CAP_SHORT_GI_80);
 #else
@@ -1373,7 +1373,7 @@ void rtw_update_sta_info(struct rtw_dev *rtwdev, struct rtw_sta_info *si,
 		break;
 	case IEEE80211_STA_RX_BW_40:
 		bw_mode = RTW_CHANNEL_WIDTH_40;
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0) || defined(OPENWRT)
 		is_support_sgi = sta->deflink.ht_cap.ht_supported &&
 				 (sta->deflink.ht_cap.cap & IEEE80211_HT_CAP_SGI_40);
 #else
@@ -1383,7 +1383,7 @@ void rtw_update_sta_info(struct rtw_dev *rtwdev, struct rtw_sta_info *si,
 		break;
 	default:
 		bw_mode = RTW_CHANNEL_WIDTH_20;
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0) || defined(OPENWRT)
 		is_support_sgi = sta->deflink.ht_cap.ht_supported &&
 				 (sta->deflink.ht_cap.cap & IEEE80211_HT_CAP_SGI_20);
 #else
@@ -1393,7 +1393,7 @@ void rtw_update_sta_info(struct rtw_dev *rtwdev, struct rtw_sta_info *si,
 		break;
 	}
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0) || defined(OPENWRT)
 	if (sta->deflink.vht_cap.vht_supported ||
 	    sta->deflink.ht_cap.ht_supported)
 #else
@@ -1416,7 +1416,7 @@ void rtw_update_sta_info(struct rtw_dev *rtwdev, struct rtw_sta_info *si,
 	si->ra_mask = ra_mask;
 	si->rate_id = rate_id;
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 18, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 18, 0) || defined(OPENWRT)
 	rtw_fw_send_ra_info(rtwdev, si, reset_ra_mask);
 #else
 	rtw_fw_send_ra_info(rtwdev, si);
@@ -1790,7 +1790,7 @@ static void rtw_vif_smps_iter(void *data, u8 *mac,
 {
 	struct rtw_dev *rtwdev = (struct rtw_dev *)data;
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 0, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 0, 0) || defined(OPENWRT)
 	if (vif->type != NL80211_IFTYPE_STATION || !vif->cfg.assoc)
 #else
 	if (vif->type != NL80211_IFTYPE_STATION || !vif->bss_conf.assoc)
@@ -1798,13 +1798,13 @@ static void rtw_vif_smps_iter(void *data, u8 *mac,
 		return;
 
 	if (rtwdev->hal.txrx_1ss)
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 0, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 0, 0) || defined(OPENWRT)
 		ieee80211_request_smps(vif, 0, IEEE80211_SMPS_STATIC);
 #else
 		ieee80211_request_smps(vif, IEEE80211_SMPS_STATIC);
 #endif
 	else
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 0, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 0, 0) || defined(OPENWRT)
 		ieee80211_request_smps(vif, 0, IEEE80211_SMPS_OFF);
 #else
 		ieee80211_request_smps(vif, IEEE80211_SMPS_OFF);
@@ -2542,7 +2542,7 @@ static void rtw_check_sta_active_iter(void *data, struct ieee80211_vif *vif)
 	if (vif->type != NL80211_IFTYPE_STATION)
 		return;
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 0, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 0, 0) || defined(OPENWRT)
 	if (vif->cfg.assoc || !is_zero_ether_addr(rtwvif->bssid))
 #else
 	if (vif->bss_conf.assoc || !is_zero_ether_addr(rtwvif->bssid))
@@ -2593,7 +2593,7 @@ void rtw_set_ampdu_factor(struct rtw_dev *rtwdev, struct ieee80211_vif *vif,
 		return;
 	}
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0) || defined(OPENWRT)
 	if (sta->deflink.vht_cap.vht_supported)
 		factor = u32_get_bits(sta->deflink.vht_cap.cap,
 				      IEEE80211_VHT_CAP_MAX_A_MPDU_LENGTH_EXPONENT_MASK);
diff --git a/main.h b/main.h
index b2369e5..d76945f 100644
--- a/main.h
+++ b/main.h
@@ -36,6 +36,8 @@
 #define RHEL_RELEASE_VERSION(a, b) a<<8 & b
 #endif
 
+#define OPENWRT
+
 #if (LINUX_VERSION_CODE < KERNEL_VERSION(6, 6, 0))
 /**
  * abs_diff - return absolute value of the difference between the arguments
diff --git a/pci.c b/pci.c
index 8b0d961..ede9029 100644
--- a/pci.c
+++ b/pci.c
@@ -1708,7 +1708,7 @@ static int rtw_pci_napi_init(struct rtw_dev *rtwdev)
 #endif
 		, &rtwpci->napi
 		, rtw_pci_napi_poll
-#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0)
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 0) && !defined(OPENWRT)
 		, NAPI_POLL_WEIGHT
 #endif
 	);
diff --git a/ps.c b/ps.c
index c6360cf..1392529 100644
--- a/ps.c
+++ b/ps.c
@@ -334,7 +334,7 @@ void rtw_recalc_lps(struct rtw_dev *rtwdev, struct ieee80211_vif *new_vif)
 		__rtw_vif_recalc_lps(&data, new_vif);
 	rtw_iterate_vifs(rtwdev, rtw_vif_recalc_lps_iter, &data);
 
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(6, 0, 0))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(6, 0, 0)) || defined(OPENWRT)
 	if (data.count == 1 && data.found_vif->cfg.ps) {
 		rtwdev->ps_enabled = true;
 	} else {
diff --git a/tx.c b/tx.c
index 79c27a4..a0e89be 100644
--- a/tx.c
+++ b/tx.c
@@ -95,7 +95,7 @@ EXPORT_SYMBOL(rtw_tx_fill_tx_desc);
 
 static u8 get_tx_ampdu_factor(struct ieee80211_sta *sta)
 {
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0) || defined(OPENWRT)
 	u8 exp = sta->deflink.ht_cap.ampdu_factor;
 #else
 	u8 exp = sta->ht_cap.ampdu_factor;
@@ -110,7 +110,7 @@ static u8 get_tx_ampdu_factor(struct ieee80211_sta *sta)
 
 static u8 get_tx_ampdu_density(struct ieee80211_sta *sta)
 {
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0) || defined(OPENWRT)
 	return sta->deflink.ht_cap.ampdu_density;
 #else
 	return sta->ht_cap.ampdu_density;
@@ -122,7 +122,7 @@ static u8 get_highest_ht_tx_rate(struct rtw_dev *rtwdev,
 {
 	u8 rate;
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0) || defined(OPENWRT)
 	if (rtwdev->hal.rf_type == RF_2T2R && sta->deflink.ht_cap.mcs.rx_mask[1] != 0)
 #else
 	if (rtwdev->hal.rf_type == RF_2T2R && sta->ht_cap.mcs.rx_mask[1] != 0)
@@ -141,7 +141,7 @@ static u8 get_highest_vht_tx_rate(struct rtw_dev *rtwdev,
 	u8 rate;
 	u16 tx_mcs_map;
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0) || defined(OPENWRT)
 	tx_mcs_map = le16_to_cpu(sta->deflink.vht_cap.vht_mcs.tx_mcs_map);
 #else
 	tx_mcs_map = le16_to_cpu(sta->vht_cap.vht_mcs.tx_mcs_map);
@@ -387,7 +387,7 @@ static void rtw_tx_data_pkt_info_update(struct rtw_dev *rtwdev,
 	if (info->control.use_rts || skb->len > hw->wiphy->rts_threshold)
 		pkt_info->rts = true;
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 19, 0) || defined(OPENWRT)
 	if (sta->deflink.vht_cap.vht_supported)
 		rate = get_highest_vht_tx_rate(rtwdev, sta);
 	else if (sta->deflink.ht_cap.ht_supported)
